import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

import '../../utils/app_theme.dart';
import 'home_page_content.dart';
import 'category_search_page.dart';
import 'user_list_page.dart';
import 'empathy_page.dart';

class MainPage extends ConsumerStatefulWidget {
  const MainPage({super.key});

  @override
  ConsumerState<MainPage> createState() => _MainPageState();
}

class _MainPageState extends ConsumerState<MainPage> {
  int _currentIndex = 0;

  // „Çø„Éñ„Éö„Éº„Ç∏„ÅÆ„É™„Çπ„Éà
  late final List<Widget> _pages;

  @override
  void initState() {
    super.initState();
    _pages = [
      const HomePageContent(), // „Éú„Éà„É†„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Å™„Åó„ÅÆ„Éõ„Éº„É†„Éö„Éº„Ç∏
      const CategorySearchPage(), // Ê§úÁ¥¢„Éö„Éº„Ç∏
      const EmpathyPage(), // ÂÖ±ÊÑü„Éö„Éº„Ç∏
      const MessagePage(), // „É°„ÉÉ„Çª„Éº„Ç∏„Éö„Éº„Ç∏Ôºà‰ªÆÔºâ
      const UserListPage(), // „Éû„Ç§„Éö„Éº„Ç∏
    ];
  }

  void _onTabTapped(int index) {
    setState(() {
      _currentIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: _pages,
      ),
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          color: AppTheme.pureWhite,
          border: Border(
            top: BorderSide(color: AppTheme.borderGray, width: 0.5),
          ),
        ),
        child: BottomNavigationBar(
          currentIndex: _currentIndex,
          onTap: _onTabTapped,
          type: BottomNavigationBarType.fixed,
          backgroundColor: Colors.transparent,
          elevation: 0,
          selectedItemColor: AppTheme.darkCharcoal,
          unselectedItemColor: AppTheme.softGray,
          selectedLabelStyle: TextStyle(
            fontSize: 11.sp,
            fontWeight: FontWeight.w600,
          ),
          unselectedLabelStyle: TextStyle(
            fontSize: 11.sp,
            fontWeight: FontWeight.w400,
          ),
          items: [
            BottomNavigationBarItem(
              icon: Icon(Icons.home_outlined, size: 22.sp),
              activeIcon: Icon(Icons.home, size: 22.sp),
              label: '„Éõ„Éº„É†',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.search_outlined, size: 22.sp),
              activeIcon: Icon(Icons.search, size: 22.sp),
              label: 'Ê§úÁ¥¢',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.favorite_border, size: 22.sp),
              activeIcon: Icon(Icons.favorite, size: 22.sp),
              label: 'ÂÖ±ÊÑü',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.chat_bubble_outline, size: 22.sp),
              activeIcon: Icon(Icons.chat_bubble, size: 22.sp),
              label: '„É°„ÉÉ„Çª„Éº„Ç∏',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.person_outline, size: 22.sp),
              activeIcon: Icon(Icons.person, size: 22.sp),
              label: '„Éû„Ç§„Éö„Éº„Ç∏',
            ),
          ],
        ),
      ),
    );
  }
}

// ‰ªÆ„ÅÆÂÖ±ÊÑü„Éö„Éº„Ç∏
class FavoritePage extends ConsumerWidget {
  const FavoritePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      backgroundColor: AppTheme.lightGray,
      appBar: AppBar(
        backgroundColor: AppTheme.pureWhite,
        elevation: 0,
        title: Text(
          'ÂÖ±ÊÑü„Åó„ÅüÊÑõ„ÅÆ„Ç®„ÉÉ„Çª„Ç§',
          style: Theme.of(context).textTheme.titleLarge?.copyWith(
            fontWeight: FontWeight.w600,
            color: AppTheme.darkCharcoal,
          ),
        ),
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.favorite_border,
              size: 64.sp,
              color: AppTheme.softGray,
            ),
            SizedBox(height: 16.h),
            Text(
              'ÂÖ±ÊÑüÊ©üËÉΩ„ÅØÈñãÁô∫‰∏≠„Åß„Åô',
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                color: AppTheme.softGray,
              ),
            ),
            SizedBox(height: 8.h),
            Text(
              '„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆÊÑõ„ÅÆ„Ç®„ÉÉ„Çª„Ç§„Çí\n„Åì„Åì„ÅßÁÆ°ÁêÜ„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô',
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: AppTheme.softGray,
                height: 1.5,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// „É°„ÉÉ„Çª„Éº„Ç∏„Éö„Éº„Ç∏
class MessagePage extends ConsumerWidget {
  const MessagePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      backgroundColor: AppTheme.lightGray,
      appBar: AppBar(
        backgroundColor: AppTheme.pureWhite,
        elevation: 0,
        title: Text(
          '„É°„ÉÉ„Çª„Éº„Ç∏',
          style: Theme.of(context).textTheme.titleLarge?.copyWith(
            fontWeight: FontWeight.w600,
            color: AppTheme.darkCharcoal,
          ),
        ),
        centerTitle: true,
        actions: [
          IconButton(
            icon: Icon(
              Icons.search,
              color: AppTheme.darkCharcoal,
              size: 22.sp,
            ),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Ê§úÁ¥¢Ê©üËÉΩ„ÅØÈñãÁô∫‰∏≠„Åß„Åô'),
                  backgroundColor: AppTheme.darkCharcoal,
                ),
              );
            },
          ),
        ],
      ),
      body: _buildMessageList(),
    );
  }

  Widget _buildMessageList() {
    // „ÉÄ„Éü„Éº„Éá„Éº„Çø„ÇíË°®Á§∫
    final conversations = [
      {
        'title': '„Äå„É¥„Ç£„É≥„ÉÜ„Éº„Ç∏„Éá„Éã„É†„Ç∏„É£„Ç±„ÉÉ„Éà„Äç„Å´„Å§„ÅÑ„Å¶',
        'lastMessage': '„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ„Å®„Å¶„ÇÇÁ¥†Êïµ„Å™„Ç®„ÉÉ„Çª„Ç§„Åß„Åó„Åü„ÄÇ',
        'senderName': '„Åø„Å©„Çä',
        'time': '3ÊôÇÈñìÂâç',
        'unread': 2,
        'type': 'üõçÔ∏è',
      },
      {
        'title': '„Åï„Åè„Çâ„Åï„Çì„Å®„ÅÆ‰ºöË©±',
        'lastMessage': '„ÅÇ„ÅÑ„Åì„Åï„Çì„ÅÆÊÑõ„ÅÆ„Ç®„ÉÉ„Çª„Ç§„ÄÅÊú¨ÂΩì„Å´ÊÑüÂãï„Åó„Åæ„Åó„Åüüíñ',
        'senderName': '„Åï„Åè„Çâ',
        'time': '30ÂàÜÂâç',
        'unread': 1,
        'type': 'üí¨',
      },
      {
        'title': '„Äå„Ç´„Ç∑„Éü„É§„Ç≥„Éº„Éà„Äç„Å´„Å§„ÅÑ„Å¶',
        'lastMessage': '„Åú„Å≤„ÅäË≠≤„Çä„Åó„Åæ„Åô„ÄÇÂ§ßÂàá„Å´„Åó„Å¶„ÅÑ„Åü„Å†„Åë„Çã„Å®„ÅÆ„Åì„Å®„Åß...',
        'senderName': '„ÅÇ„ÅÑ„Åì',
        'time': '15ÂàÜÂâç',
        'unread': 0,
        'type': 'üõçÔ∏è',
      },
    ];

    return ListView.builder(
      padding: EdgeInsets.all(16.w),
      itemCount: conversations.length,
      itemBuilder: (context, index) {
        final conv = conversations[index];
        return Container(
          margin: EdgeInsets.only(bottom: 12.h),
          decoration: BoxDecoration(
            color: AppTheme.pureWhite,
            borderRadius: BorderRadius.circular(12.r),
            boxShadow: AppTheme.subtleShadow,
          ),
          child: ListTile(
            contentPadding: EdgeInsets.all(16.w),
            leading: Container(
              width: 50.w,
              height: 50.w,
              decoration: BoxDecoration(
                color: AppTheme.accentYellow.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(25.r),
              ),
              child: Center(
                child: Text(
                  conv['type'] as String,
                  style: TextStyle(fontSize: 20.sp),
                ),
              ),
            ),
            title: Text(
              conv['title'] as String,
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                fontWeight: FontWeight.w600,
                color: AppTheme.darkCharcoal,
              ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(height: 4.h),
                Text(
                  conv['lastMessage'] as String,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: AppTheme.softGray,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                SizedBox(height: 4.h),
                Row(
                  children: [
                    Text(
                      conv['senderName'] as String,
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: AppTheme.softGray,
                        fontSize: 10.sp,
                      ),
                    ),
                    SizedBox(width: 8.w),
                    Text(
                      conv['time'] as String,
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: AppTheme.softGray,
                        fontSize: 10.sp,
                      ),
                    ),
                  ],
                ),
              ],
            ),
            trailing: conv['unread'] as int > 0
                ? Container(
                    padding: EdgeInsets.symmetric(
                      horizontal: 8.w,
                      vertical: 4.h,
                    ),
                    decoration: BoxDecoration(
                      color: AppTheme.loveRed,
                      borderRadius: BorderRadius.circular(12.r),
                    ),
                    child: Text(
                      (conv['unread'] as int).toString(),
                      style: TextStyle(
                        color: AppTheme.pureWhite,
                        fontSize: 10.sp,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  )
                : null,
            onTap: () {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('„ÉÅ„É£„ÉÉ„ÉàÁîªÈù¢„ÅØÈñãÁô∫‰∏≠„Åß„Åô'),
                  backgroundColor: AppTheme.darkCharcoal,
                ),
              );
            },
          ),
        );
      },
    );
  }
} 